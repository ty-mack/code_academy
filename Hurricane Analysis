# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

columns = ['name', 'month', 'year', 'max sustained wind', 'areas affected', 'damage,' 'deaths']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages

def fix_damages(damages):
  damages_update = []
  for x in damages:
    if 'Damages not recorded' in x:
      damages_update.append(x)
    elif "M" in x:
      y = float(x.strip('M'))
      z = y * 1000000.0
      damages_update.append(z)
    else:
      if "B" in x:
        y = float(x.strip('B'))
        z = y * 1000000000.0
        damages_update.append(z)
  return damages_update
updated_damages = fix_damages(damages)
# test function by updating damages

# 2 
# Create a Table


# Create and view the hurricanes dictionary

def create_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths):
  hurricanes = {}
  for x in range(0, len(names)):
    temp_dict = {}
    temp_dict['name'] = names[x]
    temp_dict['month'] = months[x]
    temp_dict['year'] = years[x]
    temp_dict['max sustained wind'] = max_sustained_winds[x]
    temp_dict['areas affected'] = areas_affected[x]
    temp_dict['damages'] = updated_damages[x]
    temp_dict['deaths'] = deaths[x]
    hurricanes[names[x]] = temp_dict
  return hurricanes
hurricanes = create_dictionary(names, months, years, max_sustained_winds, areas_affected, updated_damages, deaths)

# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key
hurricanes_by_year = {}
def org_hurricanes_by_year():
  for x in hurricanes:
    current_year = hurricanes[x].get('year')
    current_cane = hurricanes[x].get('name')
    if current_year in hurricanes_by_year:
      hurricanes_by_year[current_year].append(hurricanes[x])
    else:
      hurricanes_by_year[current_year] = []
      hurricanes_by_year[current_year].append(hurricanes[x])

# 4
# Counting Damaged Areas

# create dictionary of areas to store the number of hurricanes involved in
def find_most_affected_areas(hurricanes):
  affected_areas_count = {}
  for x in hurricanes:
    z = hurricanes[x].get('areas affected')
    for y in z:
      if y in affected_areas_count:
        affected_areas_count[y] += 1
      else:
        affected_areas_count[y] = 1
  return affected_areas_count
most_affected_areas = find_most_affected_areas(hurricanes)


# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in
def max_areas_affected(most_affected_areas):
  max_area = ''
  max_area_count = 0
  for x, y in most_affected_areas.items():
    if y > max_area_count:
      max_area_count = y
      max_area = x
  return max_area, max_area_count
max_area, max_count = max_areas_affected(most_affected_areas)

# 6
# Calculating the Deadliest Hurricane

# find highest mortality hurricane and the number of deaths
def find_most_deaths(hurricanes):
  most_deaths = ''
  most_deaths_count = 0
  for x in hurricanes:
    if hurricanes[x].get('deaths') > most_deaths_count: 
      most_death_counts = hurricanes[x].get('deaths')
      most_deaths = x
  return most_deaths, most_deaths_count
most_deaths, most_deaths_count = find_most_deaths(hurricanes)



# 7
# Rating Hurricanes by Mortality

# categorize hurricanes in new dictionary with mortality severity as key

def find_highest_mortality(hurricanes):
  mortality_scale = {0: 0, 1: 100, 2: 500, 3: 1000, 4: 10000}
  hurricanes_by_mortality_rating = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for x in hurricanes:
    if hurricanes[x].get('deaths') > mortality_scale.get(4):
      hurricanes_by_mortality_rating[5].append(hurricanes[x])
    elif hurricanes[x].get('deaths') > mortality_scale.get(3):
      hurricanes_by_mortality_rating[4].append(hurricanes[x])
    elif hurricanes[x].get('deaths') > mortality_scale.get(2):
      hurricanes_by_mortality_rating[3].append(hurricanes[x])
    elif hurricanes[x].get('deaths') > mortality_scale.get(1):
      hurricanes_by_mortality_rating[2].append(hurricanes[x])
    elif hurricanes[x].get('deaths') > mortality_scale.get(0):
      hurricanes_by_mortality_rating[1].append(hurricanes[x])
    else:
      hurricanes_by_mortality_rating[0].append(hurricanes[x])
  return hurricanes_by_mortality_rating
hurricanes_by_mortality_rating = find_highest_mortality(hurricanes)
# 8 Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost
def find_most_damage(hurricanes):
  most_damage = ''
  most_damage_count = 0
  for x in hurricanes:
    if hurricanes[x].get('damages') == 'Damages not recorded':
      continue
    elif hurricanes[x].get('damages') > most_damage_count: 
      most_damage_count = hurricanes[x].get('deaths')
      most_damage = x
  return most_damage, most_damage_count
most_damage, most_damage_count = find_most_damage(hurricanes)
# 9
# Rating Hurricanes by Damage

# categorize hurricanes in new dictionary with damage severity as key
def categorize_by_damage(hurricanes):
  damage_scale = {0: 0, 1: 100000000, 2: 1000000000, 3: 10000000000, 4: 50000000000}
  hurricanes_by_damage = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for x in hurricanes:
    if hurricanes[x].get('damages') =='Damages not recorded':
      continue
    elif hurricanes[x].get('damages') > damage_scale.get(4):
      hurricanes_by_damage[5].append(hurricanes[x])
    elif hurricanes[x].get('damages') > damage_scale.get(3):
      hurricanes_by_damage[4].append(hurricanes[x])
    elif hurricanes[x].get('damages') > damage_scale.get(2):
      hurricanes_by_damage[3].append(hurricanes[x])
    elif hurricanes[x].get('damages') > damage_scale.get(1):
      hurricanes_by_damage[2].append(hurricanes[x])
    elif hurricanes[x].get('damages') > damage_scale.get(0):
      hurricanes_by_damage[1].append(hurricanes[x])
    else:
      hurricanes_by_damage[0].append(hurricanes[x])
  return hurricanes_by_damage
hurricanes_by_damage = categorize_by_damage(hurricanes)
